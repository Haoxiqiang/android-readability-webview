subprojects {
    project.afterEvaluate {

        if (!project.file("build.gradle").exists()) {
            return
        }

        project.apply plugin: 'com.diffplug.spotless'

        spotless {
            format 'misc', {
                target '*.gradle', '*.md', '.gitignore'
                indentWithSpaces(4)
                trimTrailingWhitespace()
                endWithNewline()
            }
            java {
                target '**/*.java'

                googleJavaFormat('1.8').aosp().reflowLongStrings()

                importOrder()
                removeUnusedImports()

                trimTrailingWhitespace()
                endWithNewline()
                // licenseHeader '/* (C)$YEAR */'
            }
            kotlin {
                target '**/*.kt'
                trimTrailingWhitespace()
                endWithNewline()

                ktlint()
                // licenseHeaderFile rootProject.file('scripts/spotless/copyright.kt')
            }
            kotlinGradle {
                target '*.gradle.kts' // default target for kotlinGradle
                ktlint() // or ktfmt() or prettier()
            }
        }
    }
}

task createPreCommitHook() {
    def gitHooksDirectory = project.file("$project.rootDir/.git/hooks/")
    if (!gitHooksDirectory.exists()) {
        gitHooksDirectory.mkdirs()
    }
    def preCommit = project.file("$project.rootDir/.git/hooks/pre-commit")
    // overwrite each time.
    preCommit.text =
            """#!/bin/bash
stagedFiles=\$(git diff --staged --name-only)
echo "Running spotlessApply. Formatting code..."
./gradlew spotlessApply
echo "SpotlessApply task is Completed."
for file in \$stagedFiles; do
  if test -f "\$file"; then
    git add "\$file"
  fi
done
"""
    if (!preCommit.canExecute()) {
        println("make pre-commit execute")
        "chmod +x .git/hooks/pre-commit".execute()
    }
}
